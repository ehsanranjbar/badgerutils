// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	badger "github.com/dgraph-io/badger/v4"
	badgerutils "github.com/ehsanranjbar/badgerutils"

	ext "github.com/ehsanranjbar/badgerutils/store/ext"

	mock "github.com/stretchr/testify/mock"
)

// MockExtension is an autogenerated mock type for the Extension type
type MockExtension[T any] struct {
	mock.Mock
}

type MockExtension_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockExtension[T]) EXPECT() *MockExtension_Expecter[T] {
	return &MockExtension_Expecter[T]{mock: &_m.Mock}
}

// Init provides a mock function with given fields: store
func (_m *MockExtension[T]) Init(store badgerutils.Instantiator[badgerutils.BadgerStore]) {
	_m.Called(store)
}

// MockExtension_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockExtension_Init_Call[T any] struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - store badgerutils.Instantiator[badgerutils.BadgerStore]
func (_e *MockExtension_Expecter[T]) Init(store interface{}) *MockExtension_Init_Call[T] {
	return &MockExtension_Init_Call[T]{Call: _e.mock.On("Init", store)}
}

func (_c *MockExtension_Init_Call[T]) Run(run func(store badgerutils.Instantiator[badgerutils.BadgerStore])) *MockExtension_Init_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(badgerutils.Instantiator[badgerutils.BadgerStore]))
	})
	return _c
}

func (_c *MockExtension_Init_Call[T]) Return() *MockExtension_Init_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockExtension_Init_Call[T]) RunAndReturn(run func(badgerutils.Instantiator[badgerutils.BadgerStore])) *MockExtension_Init_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Instantiate provides a mock function with given fields: txn
func (_m *MockExtension[T]) Instantiate(txn *badger.Txn) ext.ExtensionInstance[T] {
	ret := _m.Called(txn)

	if len(ret) == 0 {
		panic("no return value specified for Instantiate")
	}

	var r0 ext.ExtensionInstance[T]
	if rf, ok := ret.Get(0).(func(*badger.Txn) ext.ExtensionInstance[T]); ok {
		r0 = rf(txn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ext.ExtensionInstance[T])
		}
	}

	return r0
}

// MockExtension_Instantiate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instantiate'
type MockExtension_Instantiate_Call[T any] struct {
	*mock.Call
}

// Instantiate is a helper method to define mock.On call
//   - txn *badger.Txn
func (_e *MockExtension_Expecter[T]) Instantiate(txn interface{}) *MockExtension_Instantiate_Call[T] {
	return &MockExtension_Instantiate_Call[T]{Call: _e.mock.On("Instantiate", txn)}
}

func (_c *MockExtension_Instantiate_Call[T]) Run(run func(txn *badger.Txn)) *MockExtension_Instantiate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*badger.Txn))
	})
	return _c
}

func (_c *MockExtension_Instantiate_Call[T]) Return(_a0 ext.ExtensionInstance[T]) *MockExtension_Instantiate_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExtension_Instantiate_Call[T]) RunAndReturn(run func(*badger.Txn) ext.ExtensionInstance[T]) *MockExtension_Instantiate_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockExtension creates a new instance of MockExtension. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtension[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtension[T] {
	mock := &MockExtension[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
