// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	badgerutils "github.com/ehsanranjbar/badgerutils"
	indexing "github.com/ehsanranjbar/badgerutils/indexing"

	mock "github.com/stretchr/testify/mock"
)

// MockIndexer is an autogenerated mock type for the Indexer type
type MockIndexer[T any] struct {
	mock.Mock
}

type MockIndexer_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockIndexer[T]) EXPECT() *MockIndexer_Expecter[T] {
	return &MockIndexer_Expecter[T]{mock: &_m.Mock}
}

// Index provides a mock function with given fields: v, set
func (_m *MockIndexer[T]) Index(v *T, set bool) ([]badgerutils.RawKVPair, error) {
	ret := _m.Called(v, set)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []badgerutils.RawKVPair
	var r1 error
	if rf, ok := ret.Get(0).(func(*T, bool) ([]badgerutils.RawKVPair, error)); ok {
		return rf(v, set)
	}
	if rf, ok := ret.Get(0).(func(*T, bool) []badgerutils.RawKVPair); ok {
		r0 = rf(v, set)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]badgerutils.RawKVPair)
		}
	}

	if rf, ok := ret.Get(1).(func(*T, bool) error); ok {
		r1 = rf(v, set)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexer_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockIndexer_Index_Call[T any] struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - v *T
//   - set bool
func (_e *MockIndexer_Expecter[T]) Index(v interface{}, set interface{}) *MockIndexer_Index_Call[T] {
	return &MockIndexer_Index_Call[T]{Call: _e.mock.On("Index", v, set)}
}

func (_c *MockIndexer_Index_Call[T]) Run(run func(v *T, set bool)) *MockIndexer_Index_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T), args[1].(bool))
	})
	return _c
}

func (_c *MockIndexer_Index_Call[T]) Return(_a0 []badgerutils.RawKVPair, _a1 error) *MockIndexer_Index_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndexer_Index_Call[T]) RunAndReturn(run func(*T, bool) ([]badgerutils.RawKVPair, error)) *MockIndexer_Index_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Lookup provides a mock function with given fields: args
func (_m *MockIndexer[T]) Lookup(args ...any) (badgerutils.Iterator[indexing.Partition], error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 badgerutils.Iterator[indexing.Partition]
	var r1 error
	if rf, ok := ret.Get(0).(func(...any) (badgerutils.Iterator[indexing.Partition], error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...any) badgerutils.Iterator[indexing.Partition]); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(badgerutils.Iterator[indexing.Partition])
		}
	}

	if rf, ok := ret.Get(1).(func(...any) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexer_Lookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lookup'
type MockIndexer_Lookup_Call[T any] struct {
	*mock.Call
}

// Lookup is a helper method to define mock.On call
//   - args ...any
func (_e *MockIndexer_Expecter[T]) Lookup(args ...interface{}) *MockIndexer_Lookup_Call[T] {
	return &MockIndexer_Lookup_Call[T]{Call: _e.mock.On("Lookup",
		append([]interface{}{}, args...)...)}
}

func (_c *MockIndexer_Lookup_Call[T]) Run(run func(args ...any)) *MockIndexer_Lookup_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockIndexer_Lookup_Call[T]) Return(_a0 badgerutils.Iterator[indexing.Partition], _a1 error) *MockIndexer_Lookup_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndexer_Lookup_Call[T]) RunAndReturn(run func(...any) (badgerutils.Iterator[indexing.Partition], error)) *MockIndexer_Lookup_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockIndexer creates a new instance of MockIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndexer[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndexer[T] {
	mock := &MockIndexer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
